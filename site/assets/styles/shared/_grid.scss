$edge-padding: 25px;
$max-width: 1340px;

// Gutter widths
$lg-gutter-width: 20px;
$sm-gutter-width: 10px;

// Breakpoints
$lg-min: 576px;
$sm-max: $lg-min - 1;

// Column counts
$lg-col-count: 8;
$sm-col-count: 2;

.grid {
  margin-left: auto;
  margin-right: auto;
  max-width: $max-width + ($edge-padding * 2);
  padding-left: $edge-padding;
  padding-right: $edge-padding;
  width: 100%;
}

.row {
  display: flex;
  flex-wrap: wrap;
  margin-left: ($sm-gutter-width / -2);
  margin-right: ($sm-gutter-width / -2);

  @media (min-width: $lg-min) {
    margin-left: ($lg-gutter-width / -2);
    margin-right: ($lg-gutter-width / -2);
  }
}

%column {
  min-height: 1px; // Prevent collapsing
  padding-left: ($sm-gutter-width / 2);
  padding-right: ($sm-gutter-width / 2);
  position: relative;
  width: 100%;

  @media (min-width: $lg-min) {
    padding-left: ($lg-gutter-width / 2);
    padding-right: ($lg-gutter-width / 2);
  }
}

@mixin make-media-query($min, $max) {
  @if $min and $max {
    @media (min-width: $min) and (max-width: $max) {
      @content;
    }
  } @else if $min {
    @media (min-width: $min) {
      @content;
    }
  } @else if $max {
    @media (max-width: $max) {
      @content;
    }
  } @else {
    @content;
  }
}

@mixin make-column($size, $col-count, $min, $max) {
  @extend %column;

  @include make-media-query($min, $max) {
    flex: 0 0 percentage($size / $col-count);
    // Add a `max-width` to ensure content within each column does not blow out
    // the width of the column. Applies to IE10+ and Firefox. Chrome and Safari
    // do not appear to require this.
    max-width: percentage($size / $col-count);
  }
}

@mixin make-offset($size, $col-count, $min, $max) {
  @include make-media-query($min, $max) {
    margin-left: percentage($size / $col-count);
  }
}

@for $size from 1 through $sm-col-count {
  .col-sm--#{$size} {
    @include make-column($size, $sm-col-count, null, $sm-max);
  }

  .offset-sm--#{$size} {
    @include make-offset($size, $sm-col-count, null, $sm-max);
  }

  // Ran into issues where child columns were a
  // percent of their parents, where we want consisten
  // column widths, even when nested
  @for $sizeChild from 1 through $sm-col-count {
    .col-sm--#{$size} .col-sm--#{$sizeChild} {
      @include make-column($sizeChild, $size, null, $sm-max);
    }

    .col-sm--#{$size} .offset-sm--#{$sizeChild} {
      @include make-offset($sizeChild, $size, null, $sm-max);
    }
  }
}

@for $size from 1 through $lg-col-count {
  .col-lg--#{$size} {
    @include make-column($size, $lg-col-count, $lg-min, null);
  }

  .offset-lg--#{$size} {
    @include make-offset($size, $lg-col-count, $lg-min, null);
  }

  // Ran into issues where child columns were a
  // percent of their parents, where we want consisten
  // column widths, even when nested
  @for $sizeChild from 1 through $lg-col-count {
    .col-lg--#{$size} .col-lg--#{$sizeChild} {
      @include make-column($sizeChild, $size, $lg-min, null);
    }

    .col-lg--#{$size} .offset-lg--#{$sizeChild} {
      @include make-offset($sizeChild, $size, $lg-min, null);
    }
  }
}

.hidden-sm {
  @media (max-width: $sm-max) {
    display: none !important;
  }
}

.hidden-lg {
  @media (min-width: $lg-min) {
    display: none !important;
  }
}
